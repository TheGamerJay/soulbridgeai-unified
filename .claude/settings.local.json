{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(docker build:*)",
      "Bash(where docker)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(git commit:*)",
      "Bash(del nul)",
      "Bash(docker:*)",
      "Bash(sc query:*)",
      "Bash(sc start:*)",
      "Bash(wsl.exe:*)",
      "Bash(powershell:*)",
      "Bash(timeout:*)",
      "Bash(taskkill:*)",
      "Bash(start \"\" \"C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe\")",
      "Bash(cmd //c \"start \"\"\"\" \"\"C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe\"\"\")",
      "Bash(wsl:*)",
      "Bash(pip install:*)",
      "Bash(npm install:*)",
      "Bash(python:*)",
      "Bash(npm start)",
      "Bash(find:*)",
      "Bash(copy:*)",
      "Bash(cp:*)",
      "Bash(mkdir:*)",
      "Bash(pkill:*)",
      "Bash(set PORT=3001)",
      "Bash(curl:*)",
      "Bash(for file in \"C:\\Users\\jaaye\\OneDrive\\Desktop\\soulbridgeai-unified\\backend\\static\\logos\"/*)",
      "Bash(do cp \"$file\" \"C:\\Users\\jaaye\\OneDrive\\Desktop\\soulbridgeai-unified\\frontend\\public\"\")",
      "Bash(done)",
      "Bash(tail:*)",
      "Bash(rm:*)",
      "Bash(mv:*)",
      "Bash(git rm:*)",
      "Bash(dir:*)",
      "Bash(ls:*)",
      "Bash(grep:*)",
      "Bash(touch:*)",
      "Bash(git checkout:*)",
      "Bash(move \"favicon.ico\\*\" .)",
      "WebFetch(domain:www.soulbridgeai.com)",
      "Bash(wc:*)",
      "Bash(sqlite3:*)",
      "Bash(cat:*)",
      "Bash(echo:*)",
      "Bash(git hash-object:*)",
      "Bash(git ls-tree:*)",
      "Bash(rg:*)",
      "Bash(cd \"C:\\Users\\jaaye\\OneDrive\\Desktop\\soulbridgeai-unified\\backend\")",
      "Bash(python -c \"import watchdog; print(''watchdog available'')\")",
      "Bash(chmod:*)",
      "Bash(gunicorn:*)",
      "mcp__ide__getDiagnostics",
      "Bash(railway --version)",
      "Bash(railway:*)",
      "Bash(npm uninstall:*)",
      "Bash(git check-ignore:*)",
      "Bash(git branch:*)",
      "WebFetch(domain:soulbridgeai-unified-production.up.railway.app)",
      "WebFetch(domain:127.0.0.1)",
      "Bash(tasklist:*)",
      "Bash(wmic:*)",
      "Bash(node:*)",
      "Bash(start /b python:*)",
      "WebFetch(domain:soulbridgeai.com)",
      "Bash(sed:*)",
      "Bash(start \"\" \"C:\\Users\\jaaye\\OneDrive\\Desktop\\soulbridgeai-unified\\test_upgrade_modal.html\")",
      "Bash(git restore:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python fix_schema.py)",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python fix_production_terms.py)",
      "Bash(chcp:*)",
      "WebFetch(domain:localhost)",
      "Bash(npm:*)",
      "Bash(vsce package:*)",
      "Bash(code:*)",
      "Bash(awk:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python fix_database_schema.py)",
      "Bash(if [ -f \"backend/soulbridge.db\" ])",
      "Bash(then sqlite3 backend/soulbridge.db \"SELECT email, plan_type, user_plan FROM users LIMIT 5;\")",
      "Bash(else echo \"No local SQLite database found\")",
      "Bash(fi)",
      "Bash(ffmpeg:*)",
      "Bash(where:*)",
      "Bash(choco install:*)",
      "Bash(ollama:*)",
      "WebFetch(domain:ollama.com)",
      "Bash(del test_login.py simple_test.py test_known_user.py create_test_user.py test_auth_direct.py)",
      "WebFetch(domain:ollama-ai.railway.internal)",
      "Bash(del railway.toml)",
      "WebFetch(domain:ollama-ai-production.up.railway.app)",
      "WebFetch(domain:station.railway.com)",
      "WebFetch(domain:railway.com)",
      "Bash(true)",
      "Bash(del \"C:\\Users\\jaaye\\OneDrive\\Desktop\\soulbridgeai-unified\\backend\\routes\\api_companion_free.py\")",
      "Bash(del:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python admin_trial_reset.py 104)",
      "Bash(move:*)",
      "WebSearch",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:pypi.org)",
      "Bash(set PYTHONIOENCODING=utf-8)",
      "Bash(set ENVIRONMENT=development)",
      "Bash(set DEBUG_MODE=true)",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nfrom database_utils import get_database\n\n# Check if referrals table exists and has referrer_id column\ntry:\n    db = get_database()\n    conn = db.get_connection()\n    cursor = conn.cursor()\n    \n    # Check table existence\n    cursor.execute(\"\"\"\"\"\"SELECT table_name FROM information_schema.tables WHERE table_name = ''referrals''\"\"\"\"\"\")\n    table_exists = cursor.fetchone()\n    print(f''Referrals table exists: {table_exists is not None}'')\n    \n    if table_exists:\n        # Check columns\n        cursor.execute(\"\"\"\"\"\"SELECT column_name FROM information_schema.columns WHERE table_name = ''referrals'' ORDER BY ordinal_position\"\"\"\"\"\")\n        columns = [row[0] for row in cursor.fetchall()]\n        print(f''Referrals table columns: {columns}'')\n        print(f''referrer_id in columns: {\"\"referrer_id\"\" in columns}'')\n    \n    conn.close()\nexcept Exception as e:\n    print(f''Error: {e}'')\n\")",
      "Bash(set PRICE_SILVER_MONTHLY=price_test_silver_monthly)",
      "Bash(set PRICE_SILVER_YEARLY=price_test_silver_yearly)",
      "Bash(set PRICE_GOLD_MONTHLY=price_test_gold_monthly)",
      "Bash(set PRICE_GOLD_YEARLY=price_test_gold_yearly)",
      "Bash(set STRIPE_SECRET_KEY=sk_test_fake)",
      "Bash(set STRIPE_PUBLISHABLE_KEY=pk_test_fake)",
      "Bash(set STRIPE_WEBHOOK_SECRET=whsec_test_fake)",
      "Bash(git reset:*)"
    ],
    "deny": [],
    "defaultMode": "acceptEdits"
  }
}
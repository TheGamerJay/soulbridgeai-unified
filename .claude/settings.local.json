{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(docker build:*)",
      "Bash(where docker)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(git commit:*)",
      "Bash(del nul)",
      "Bash(docker:*)",
      "Bash(sc query:*)",
      "Bash(sc start:*)",
      "Bash(wsl.exe:*)",
      "Bash(powershell:*)",
      "Bash(timeout:*)",
      "Bash(taskkill:*)",
      "Bash(start \"\" \"C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe\")",
      "Bash(cmd //c \"start \"\"\"\" \"\"C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe\"\"\")",
      "Bash(wsl:*)",
      "Bash(pip install:*)",
      "Bash(npm install:*)",
      "Bash(python:*)",
      "Bash(npm start)",
      "Bash(find:*)",
      "Bash(copy:*)",
      "Bash(cp:*)",
      "Bash(mkdir:*)",
      "Bash(pkill:*)",
      "Bash(set PORT=3001)",
      "Bash(curl:*)",
      "Bash(for file in \"C:\\Users\\jaaye\\OneDrive\\Desktop\\soulbridgeai-unified\\backend\\static\\logos\"/*)",
      "Bash(do cp \"$file\" \"C:\\Users\\jaaye\\OneDrive\\Desktop\\soulbridgeai-unified\\frontend\\public\"\")",
      "Bash(done)",
      "Bash(tail:*)",
      "Bash(rm:*)",
      "Bash(mv:*)",
      "Bash(git rm:*)",
      "Bash(dir:*)",
      "Bash(ls:*)",
      "Bash(grep:*)",
      "Bash(touch:*)",
      "Bash(git checkout:*)",
      "Bash(move \"favicon.ico\\*\" .)",
      "WebFetch(domain:www.soulbridgeai.com)",
      "Bash(wc:*)",
      "Bash(sqlite3:*)",
      "Bash(cat:*)",
      "Bash(echo:*)",
      "Bash(git hash-object:*)",
      "Bash(git ls-tree:*)",
      "Bash(rg:*)",
      "Bash(cd \"C:\\Users\\jaaye\\OneDrive\\Desktop\\soulbridgeai-unified\\backend\")",
      "Bash(python -c \"import watchdog; print(''watchdog available'')\")",
      "Bash(chmod:*)",
      "Bash(gunicorn:*)",
      "mcp__ide__getDiagnostics",
      "Bash(railway --version)",
      "Bash(railway:*)",
      "Bash(npm uninstall:*)",
      "Bash(git check-ignore:*)",
      "Bash(git branch:*)",
      "WebFetch(domain:soulbridgeai-unified-production.up.railway.app)",
      "WebFetch(domain:127.0.0.1)",
      "Bash(tasklist:*)",
      "Bash(wmic:*)",
      "Bash(node:*)",
      "Bash(start /b python:*)",
      "WebFetch(domain:soulbridgeai.com)",
      "Bash(sed:*)",
      "Bash(start \"\" \"C:\\Users\\jaaye\\OneDrive\\Desktop\\soulbridgeai-unified\\test_upgrade_modal.html\")",
      "Bash(git restore:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python fix_schema.py)",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python fix_production_terms.py)",
      "Bash(chcp:*)",
      "WebFetch(domain:localhost)",
      "Bash(npm:*)",
      "Bash(vsce package:*)",
      "Bash(code:*)",
      "Bash(awk:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python fix_database_schema.py)",
      "Bash(if [ -f \"backend/soulbridge.db\" ])",
      "Bash(then sqlite3 backend/soulbridge.db \"SELECT email, plan_type, user_plan FROM users LIMIT 5;\")",
      "Bash(else echo \"No local SQLite database found\")",
      "Bash(fi)",
      "Bash(ffmpeg:*)",
      "Bash(where:*)",
      "Bash(choco install:*)",
      "Bash(ollama:*)",
      "WebFetch(domain:ollama.com)",
      "Bash(del test_login.py simple_test.py test_known_user.py create_test_user.py test_auth_direct.py)",
      "WebFetch(domain:ollama-ai.railway.internal)",
      "Bash(del railway.toml)",
      "WebFetch(domain:ollama-ai-production.up.railway.app)",
      "WebFetch(domain:station.railway.com)",
      "WebFetch(domain:railway.com)",
      "Bash(true)",
      "Bash(del \"C:\\Users\\jaaye\\OneDrive\\Desktop\\soulbridgeai-unified\\backend\\routes\\api_companion_free.py\")",
      "Bash(del:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python admin_trial_reset.py 104)",
      "Bash(move:*)",
      "WebSearch",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:pypi.org)",
      "Bash(set PYTHONIOENCODING=utf-8)",
      "Bash(set ENVIRONMENT=development)",
      "Bash(set DEBUG_MODE=true)",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nfrom database_utils import get_database\n\n# Check if referrals table exists and has referrer_id column\ntry:\n    db = get_database()\n    conn = db.get_connection()\n    cursor = conn.cursor()\n    \n    # Check table existence\n    cursor.execute(\"\"\"\"\"\"SELECT table_name FROM information_schema.tables WHERE table_name = ''referrals''\"\"\"\"\"\")\n    table_exists = cursor.fetchone()\n    print(f''Referrals table exists: {table_exists is not None}'')\n    \n    if table_exists:\n        # Check columns\n        cursor.execute(\"\"\"\"\"\"SELECT column_name FROM information_schema.columns WHERE table_name = ''referrals'' ORDER BY ordinal_position\"\"\"\"\"\")\n        columns = [row[0] for row in cursor.fetchall()]\n        print(f''Referrals table columns: {columns}'')\n        print(f''referrer_id in columns: {\"\"referrer_id\"\" in columns}'')\n    \n    conn.close()\nexcept Exception as e:\n    print(f''Error: {e}'')\n\")",
      "Bash(set PRICE_SILVER_MONTHLY=price_test_silver_monthly)",
      "Bash(set PRICE_SILVER_YEARLY=price_test_silver_yearly)",
      "Bash(set PRICE_GOLD_MONTHLY=price_test_gold_monthly)",
      "Bash(set PRICE_GOLD_YEARLY=price_test_gold_yearly)",
      "Bash(set STRIPE_SECRET_KEY=sk_test_fake)",
      "Bash(set STRIPE_PUBLISHABLE_KEY=pk_test_fake)",
      "Bash(set STRIPE_WEBHOOK_SECRET=whsec_test_fake)",
      "Bash(git reset:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nfrom database_utils import get_database\n\n# Check current max_trials data for timing issues\ntry:\n    db = get_database()\n    conn = db.get_connection()\n    cursor = conn.cursor()\n    \n    # Get all max_trials records\n    cursor.execute(''SELECT user_id, trial_used, trial_start_time, trial_expires_at FROM max_trials ORDER BY trial_start_time DESC LIMIT 5'')\n    trials = cursor.fetchall()\n    \n    print(''=== Recent Trial Records ==='')\n    for trial in trials:\n        user_id, used, start, expires = trial\n        if start and expires:\n            import datetime\n            # Calculate actual duration\n            start_dt = start if isinstance(start, datetime.datetime) else datetime.datetime.fromisoformat(str(start).replace(''Z'', ''+00:00''))\n            expires_dt = expires if isinstance(expires, datetime.datetime) else datetime.datetime.fromisoformat(str(expires).replace(''Z'', ''+00:00''))\n            duration_hours = (expires_dt - start_dt).total_seconds() / 3600\n            print(f''User {user_id}: Used={used}, Duration={duration_hours:.1f}h'')\n            print(f''  Start: {start_dt}'')\n            print(f''  Expires: {expires_dt}'')\n        else:\n            print(f''User {user_id}: Used={used}, Duration=NULL'')\n        print()\n    \n    conn.close()\nexcept Exception as e:\n    print(f''Error: {e}'')\n\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nfrom database_utils import get_database\n\ntry:\n    db = get_database()\n    conn = db.get_connection()\n    cursor = conn.cursor()\n    \n    # Check your current trial status and credits\n    user_id = 104  # Your user ID\n    \n    # Check max_trials table\n    cursor.execute(''SELECT * FROM max_trials WHERE user_id = %s'', (user_id,))\n    trial_data = cursor.fetchone()\n    \n    print(''=== TRIAL STATUS ==='')\n    print(f''Trial record: {trial_data}'')\n    \n    # Check users table for credits and plan\n    cursor.execute(''SELECT id, email, plan_type, trainer_credits, user_plan FROM users WHERE id = %s'', (user_id,))\n    user_data = cursor.fetchone()\n    \n    print(''=== USER DATA ==='')\n    print(f''User record: {user_data}'')\n    \n    conn.close()\n    \nexcept Exception as e:\n    print(f''Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nfrom database_utils import get_database\n\ntry:\n    db = get_database()\n    conn = db.get_connection()\n    cursor = conn.cursor()\n    \n    # Check your current trial status and credits\n    user_id = 104  # Your user ID\n    \n    # Check max_trials table\n    cursor.execute(''SELECT * FROM max_trials WHERE user_id = %s'', (user_id,))\n    trial_data = cursor.fetchone()\n    \n    print(''=== TRIAL STATUS ==='')\n    print(f''Trial record: {trial_data}'')\n    \n    # Check users table for credits and plan\n    cursor.execute(''SELECT id, email, plan_type, trainer_credits, user_plan FROM users WHERE id = %s'', (user_id,))\n    user_data = cursor.fetchone()\n    \n    print(''=== USER DATA ==='')\n    print(f''User record: {user_data}'')\n    \n    conn.close()\n    \nexcept Exception as e:\n    print(f''Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nfrom database_utils import get_database\n\ntry:\n    db = get_database()\n    conn = db.get_connection()\n    cursor = conn.cursor()\n    \n    # Check your current trial status and credits\n    user_id = 104  # Your user ID\n    \n    # Check max_trials table\n    cursor.execute(''SELECT * FROM max_trials WHERE user_id = %s'', (user_id,))\n    trial_data = cursor.fetchone()\n    \n    print(''=== TRIAL STATUS ==='')\n    print(f''Trial record: {trial_data}'')\n    \n    # Check users table for credits and plan\n    cursor.execute(''SELECT id, email, plan_type, trainer_credits, user_plan FROM users WHERE id = %s'', (user_id,))\n    user_data = cursor.fetchone()\n    \n    print(''=== USER DATA ==='')\n    print(f''User record: {user_data}'')\n    \n    conn.close()\n    \nexcept Exception as e:\n    print(f''Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nfrom database_utils import get_database\n\ntry:\n    db = get_database()\n    conn = db.get_connection()\n    cursor = conn.cursor()\n    \n    # Check your current trial status\n    user_id = 104  # Your user ID\n    \n    # Check max_trials table\n    cursor.execute(''SELECT * FROM max_trials WHERE user_id = %s'', (user_id,))\n    trial_data = cursor.fetchone()\n    \n    print(''=== DATABASE TRIAL STATUS ==='')\n    print(f''Trial record: {trial_data}'')\n    \n    # Check users table \n    cursor.execute(''SELECT id, email, plan_type, trainer_credits, user_plan FROM users WHERE id = %s'', (user_id,))\n    user_data = cursor.fetchone()\n    \n    print(''=== USER DATA ==='')\n    print(f''User record: {user_data}'')\n    \n    conn.close()\n    \nexcept Exception as e:\n    print(f''Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nfrom database_utils import get_database\n\ntry:\n    db = get_database()\n    conn = db.get_connection()\n    cursor = conn.cursor()\n    \n    # Check your current trial status\n    user_id = 104  # Your user ID\n    \n    # Check max_trials table\n    cursor.execute(''SELECT * FROM max_trials WHERE user_id = %s'', (user_id,))\n    trial_data = cursor.fetchone()\n    \n    print(''=== DATABASE TRIAL STATUS ==='')\n    print(f''Trial record: {trial_data}'')\n    \n    # Check users table \n    cursor.execute(''SELECT id, email, plan_type, trainer_credits, user_plan FROM users WHERE id = %s'', (user_id,))\n    user_data = cursor.fetchone()\n    \n    print(''=== USER DATA ==='')\n    print(f''User record: {user_data}'')\n    \n    conn.close()\n    \nexcept Exception as e:\n    print(f''Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nfrom datetime import datetime, timezone\nimport os\n\nconn = psycopg2.connect(os.environ.get(''DATABASE_URL''))\ncur = conn.cursor()\n\n# Check your trial status\nuser_id = 104\ncur.execute(''SELECT trial_active, trial_expires_at FROM users WHERE id = %s'', (user_id,))\nresult = cur.fetchone()\n\nif result:\n    trial_active, expires_at = result\n    print(f''Trial Active (DB): {trial_active}'')\n    print(f''Trial Expires: {expires_at}'')\n    \n    if expires_at:\n        now = datetime.now(timezone.utc)\n        if isinstance(expires_at, str):\n            expires_dt = datetime.fromisoformat(expires_at.replace(''Z'', ''+00:00''))\n        else:\n            expires_dt = expires_at\n        print(f''Current Time: {now}'')\n        print(f''Trial Should Be Expired: {now > expires_dt}'')\n        \n        if now > expires_dt and trial_active:\n            print(''🔧 FIXING: Expiring trial in database...'')\n            cur.execute(''UPDATE users SET trial_active = FALSE WHERE id = %s'', (user_id,))\n            conn.commit()\n            print(''✅ Trial expired in database'')\n\nconn.close()\n\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nimport os\n\ntry:\n    conn = psycopg2.connect(os.environ.get(''DATABASE_URL''))\n    cur = conn.cursor()\n    \n    # Check your user account status\n    user_id = 104  # Your user ID\n    cur.execute(''SELECT id, email, user_plan, trial_active, trial_expires_at FROM users WHERE id = %s'', (user_id,))\n    result = cur.fetchone()\n    \n    if result:\n        user_id, email, user_plan, trial_active, trial_expires = result\n        print(f''CURRENT USER STATUS:'')\n        print(f''  User ID: {user_id}'')\n        print(f''  Email: {email}'')\n        print(f''  Plan: {user_plan}'')\n        print(f''  Trial Active: {trial_active}'')\n        print(f''  Trial Expires: {trial_expires}'')\n        \n        # Determine effective plan\n        if trial_active and user_plan == ''bronze'':\n            effective_plan = ''gold''\n        else:\n            effective_plan = user_plan\n            \n        print(f''  Effective Plan: {effective_plan}'')\n        print()\n        print(''EXPECTED FEATURES:'')\n        \n        if effective_plan == ''bronze'':\n            print(''  - Basic: Decoder (3), Fortune (2), Horoscope (3)'')\n            print(''  - NO Premium features'')\n        elif effective_plan == ''silver'':\n            print(''  - Basic: Decoder (15), Fortune (8), Horoscope (10)'')\n            print(''  - Premium: Voice Journal, AI Images, Relationships, Meditations'')\n            print(''  - NO Mini Studio'')\n        elif effective_plan == ''gold'':\n            print(''  - Basic: Decoder (unlimited), Fortune (unlimited), Horoscope (unlimited)'')\n            print(''  - Premium: Voice Journal, AI Images, Relationships, Meditations'')\n            print(''  - Gold Exclusive: Mini Studio'')\n    else:\n        print(''User not found'')\n        \n    conn.close()\nexcept Exception as e:\n    print(f''Error: {e}'')\n\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nfrom datetime import datetime, timezone\nimport os\n\nconn = psycopg2.connect(os.environ.get(''DATABASE_URL''))\ncur = conn.cursor()\n\n# Check your trial status\nuser_id = 104\ncur.execute(''SELECT trial_active, trial_expires_at FROM users WHERE id = %s'', (user_id,))\nresult = cur.fetchone()\n\nif result:\n    trial_active, expires_at = result\n    print(f''DATABASE Trial Active: {trial_active}'')\n    print(f''DATABASE Trial Expires: {expires_at}'')\n    \n    if expires_at:\n        now = datetime.now(timezone.utc)\n        if isinstance(expires_at, str):\n            expires_dt = datetime.fromisoformat(expires_at.replace(''Z'', ''+00:00''))\n        else:\n            expires_dt = expires_at.replace(tzinfo=timezone.utc) if expires_at.tzinfo is None else expires_at\n        print(f''Current Time: {now}'')\n        print(f''Trial Should Be Expired: {now > expires_dt}'')\n        \n        if now > expires_dt and trial_active:\n            print(''🔧 FIXING: Expiring trial in database...'')\n            cur.execute(''UPDATE users SET trial_active = FALSE WHERE id = %s'', (user_id,))\n            conn.commit()\n            print(''✅ Trial expired in database'')\n\nconn.close()\n\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nfrom datetime import datetime, timezone\nimport os\n\nconn = psycopg2.connect(os.environ.get(''DATABASE_URL''))\ncur = conn.cursor()\n\n# Check your current status\nuser_id = 104\ncur.execute(''SELECT id, email, user_plan, trial_active, trial_expires_at FROM users WHERE id = %s'', (user_id,))\nresult = cur.fetchone()\n\nif result:\n    user_id, email, user_plan, trial_active, trial_expires = result\n    print(f''DATABASE STATUS:'')\n    print(f''  User ID: {user_id}'')\n    print(f''  Email: {email}'')\n    print(f''  Plan: {user_plan}'')\n    print(f''  Trial Active: {trial_active}'')\n    print(f''  Trial Expires: {trial_expires}'')\n    \n    if trial_expires:\n        now = datetime.now(timezone.utc)\n        if isinstance(trial_expires, str):\n            expires_dt = datetime.fromisoformat(trial_expires.replace(''Z'', ''+00:00''))\n        else:\n            expires_dt = trial_expires.replace(tzinfo=timezone.utc) if trial_expires.tzinfo is None else trial_expires\n        print(f''  Current Time: {now}'')\n        print(f''  Trial Should Be Active: {now < expires_dt}'')\n\nconn.close()\n\")",
      "Read(/C:\\c\\Users\\jaaye\\OneDrive\\Desktop/**)",
      "Read(/C:\\Users\\jaaye\\OneDrive\\Desktop/**)",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nfrom datetime import datetime, timezone\nimport os\n\nconn = psycopg2.connect(os.environ.get(''DATABASE_URL''))\ncur = conn.cursor()\n\n# Check your current user status\nuser_id = 104\ncur.execute(''SELECT id, email, user_plan, trial_active, trial_expires_at FROM users WHERE id = %s'', (user_id,))\nresult = cur.fetchone()\n\nif result:\n    user_id, email, user_plan, trial_active, trial_expires = result\n    print(f''DATABASE STATUS:'')\n    print(f''  User ID: {user_id}'')\n    print(f''  Email: {email}'')\n    print(f''  Plan: {user_plan}'')\n    print(f''  Trial Active: {trial_active}'')\n    print(f''  Trial Expires: {trial_expires}'')\n    \n    if trial_expires:\n        now = datetime.now(timezone.utc)\n        if isinstance(trial_expires, str):\n            expires_dt = datetime.fromisoformat(trial_expires.replace(''Z'', ''+00:00''))\n        else:\n            expires_dt = trial_expires.replace(tzinfo=timezone.utc) if trial_expires.tzinfo is None else trial_expires\n        print(f''  Current Time: {now}'')\n        print(f''  Trial Should Be Active: {now < expires_dt}'')\n        \n        # Determine what limits SHOULD show\n        if user_plan == ''gold'':\n            print(''  EXPECTED LIMITS: ∞ daily (Gold tier)'')\n        elif trial_active and now < expires_dt:\n            print(''  EXPECTED LIMITS: ∞ daily (Active trial gives Gold access)'')\n        elif user_plan == ''silver'':\n            print(''  EXPECTED LIMITS: 15/8/10/15 daily (Silver tier)'')\n        else:\n            print(''  EXPECTED LIMITS: 3/2/3/3 daily (Bronze tier)'')\n    else:\n        # No trial data\n        if user_plan == ''gold'':\n            print(''  EXPECTED LIMITS: ∞ daily (Gold tier)'')\n        elif user_plan == ''silver'':\n            print(''  EXPECTED LIMITS: 15/8/10/15 daily (Silver tier)'')\n        else:\n            print(''  EXPECTED LIMITS: 3/2/3/3 daily (Bronze tier)'')\n\nconn.close()\n\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nimport os\n\nconn = psycopg2.connect(os.environ.get(''DATABASE_URL''))\ncur = conn.cursor()\n\n# Check your current trial status and credits\nuser_id = 104  # Your user ID\n\n# Check users table\ncur.execute(''SELECT id, email, user_plan, trial_active, trial_expires_at, trainer_credits FROM users WHERE id = %s'', (user_id,))\nresult = cur.fetchone()\n\nif result:\n    user_id, email, user_plan, trial_active, trial_expires, credits = result\n    print(f''CURRENT STATUS:'')\n    print(f''  User ID: {user_id}'')\n    print(f''  Email: {email}'')\n    print(f''  Plan: {user_plan}'')\n    print(f''  Trial Active: {trial_active}'')\n    print(f''  Trial Expires: {trial_expires}'')\n    print(f''  Current Credits: {credits}'')\n    \n    if trial_active:\n        print(''  ✅ You are in TRIAL MODE'')\n        print(''  Expected: 60 trial credits for mini studio features'')\n    else:\n        print(''  ❌ Trial is not active'')\n    \nelse:\n    print(''User not found'')\n\nconn.close()\n\")",
      "Bash(then sqlite3 backend/soulbridge.db \"SELECT email, user_plan, trial_active, trainer_credits FROM users WHERE id = 104 LIMIT 1;\")",
      "Bash(for file in voice_chat.html tier_lock_demo.html register.html referrals.html profile_broken.html mini_assistant_simple.html mini_assistant.html login.html intro.html chat.html)",
      "Bash(do sed -i 's|/static/logos/IntroLogo\\.png|/static/logos/New IntroLogo.png|g' \"$file\")",
      "Bash(for file in tier_lock_demo.html register.html referrals.html profile_broken.html mini_assistant_simple.html mini_assistant.html login.html intro.html chat.html)",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(then sed -i 's|/static/logos/IntroLogo\\.png|/static/logos/New IntroLogo.png|g' \"$file\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nfrom datetime import datetime, timezone\nimport os\n\ntry:\n    conn = psycopg2.connect(os.environ.get(''DATABASE_URL''))\n    cur = conn.cursor()\n    \n    # Check your current user status\n    user_id = 104  # Your user ID\n    \n    # Get full user data\n    cur.execute(''''''SELECT \n        id, email, user_plan, trial_active, trial_expires_at, \n        artistic_time, trial_credits, last_credit_reset \n        FROM users WHERE id = %s'''''', (user_id,))\n    \n    result = cur.fetchone()\n    \n    if result:\n        user_id, email, user_plan, trial_active, trial_expires, artistic_time, trial_credits, last_reset = result\n        print(f''=== USER STATUS DEBUG ==='')\n        print(f''User ID: {user_id}'')\n        print(f''Email: {email}'')\n        print(f''Plan: {user_plan}'')\n        print(f''Trial Active: {trial_active}'')\n        print(f''Trial Expires: {trial_expires}'')\n        print(f''Artistic Time (Monthly): {artistic_time}'')\n        print(f''Trial Credits: {trial_credits}'')\n        print(f''Last Credit Reset: {last_reset}'')\n        \n        # Check if trial should be active\n        if trial_expires:\n            now = datetime.now(timezone.utc)\n            if isinstance(trial_expires, str):\n                expires_dt = datetime.fromisoformat(trial_expires.replace(''Z'', ''+00:00''))\n            else:\n                expires_dt = trial_expires.replace(tzinfo=timezone.utc) if trial_expires.tzinfo is None else trial_expires\n            print(f''Current Time: {now}'')\n            print(f''Trial Should Be Active: {now < expires_dt}'')\n            \n        # Calculate expected total credits\n        total_expected = artistic_time or 0\n        if trial_active and user_plan == ''bronze'':\n            total_expected += trial_credits or 60\n            \n        print(f''Expected Total Credits: {total_expected}'')\n        \n    else:\n        print(''User not found'')\n        \n    conn.close()\n    \nexcept Exception as e:\n    print(f''Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(then sqlite3 backend/soulbridge.db \"SELECT id, email, user_plan, trial_active, artistic_time, trial_credits FROM users WHERE id = 104 LIMIT 1;\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nfrom datetime import datetime, timezone\nimport os\n\ntry:\n    conn = psycopg2.connect(os.environ.get(''DATABASE_URL''))\n    cur = conn.cursor()\n    \n    # Check your current user status\n    user_id = 104  # Your user ID\n    \n    # Get full user data\n    cur.execute(''''''SELECT \n        id, email, user_plan, trial_active, trial_expires_at, \n        credits, trial_credits, last_credit_reset, purchased_credits\n        FROM users WHERE id = %s'''''', (user_id,))\n    \n    result = cur.fetchone()\n    \n    if result:\n        user_id, email, user_plan, trial_active, trial_expires, credits, trial_credits, last_reset, purchased_credits = result\n        print(f''=== USER STATUS DEBUG ==='')\n        print(f''User ID: {user_id}'')\n        print(f''Email: {email}'')\n        print(f''Plan: {user_plan}'')\n        print(f''Trial Active: {trial_active}'')\n        print(f''Trial Expires: {trial_expires}'')\n        print(f''Credits: {credits}'')\n        print(f''Trial Credits: {trial_credits}'')\n        print(f''Purchased Credits: {purchased_credits}'')\n        print(f''Last Credit Reset: {last_reset}'')\n        \n        # Check if trial should be active\n        if trial_expires:\n            now = datetime.now(timezone.utc)\n            if isinstance(trial_expires, str):\n                expires_dt = datetime.fromisoformat(trial_expires.replace(''Z'', ''+00:00''))\n            else:\n                expires_dt = trial_expires.replace(tzinfo=timezone.utc) if trial_expires.tzinfo is None else trial_expires\n            print(f''Current Time: {now}'')\n            print(f''Trial Should Be Active: {now < expires_dt}'')\n            \n        # Calculate expected total credits\n        total_expected = credits or 0\n        if purchased_credits:\n            total_expected += purchased_credits\n        if trial_active and user_plan == ''bronze'':\n            total_expected += trial_credits or 60\n            \n        print(f''Expected Total Credits: {total_expected}'')\n        \n    else:\n        print(''User not found'')\n        \n    conn.close()\n    \nexcept Exception as e:\n    print(f''Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(then sqlite3 backend/soulbridge.db \"SELECT id, email, user_plan, trial_active, credits, trial_credits FROM users WHERE id = 104 LIMIT 1;\")",
      "Bash(then sqlite3 backend/soulbridge.db \".schema users\")",
      "Bash(else echo \"Local database not found\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nimport os\n\ntry:\n    conn = psycopg2.connect(os.environ.get(''DATABASE_URL''))\n    cur = conn.cursor()\n    \n    # Check what columns exist in the users table\n    cur.execute(''''''\n        SELECT column_name, data_type, is_nullable, column_default \n        FROM information_schema.columns \n        WHERE table_name = ''users'' \n        ORDER BY ordinal_position\n    '''''')\n    \n    columns = cur.fetchall()\n    print(''=== PRODUCTION USERS TABLE COLUMNS ==='')\n    column_names = []\n    for col in columns:\n        column_name, data_type, nullable, default = col\n        column_names.append(column_name)\n        print(f''{column_name}: {data_type} (nullable: {nullable}, default: {default})'')\n    \n    # Check for missing expected columns\n    expected = [''credits'', ''purchased_credits'', ''artistic_time'', ''trial_credits'']\n    missing = [col for col in expected if col not in column_names]\n    \n    if missing:\n        print(f''\\n⚠️ MISSING COLUMNS: {missing}'')\n    else:\n        print(f''\\n✅ All expected columns present'')\n    \n    conn.close()\n    \nexcept Exception as e:\n    print(f''❌ Error (expected - not connected to production): {e}'')\n\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python fix_production_columns.py)",
      "Bash(for file in analytics.html companion_selection.html plan_selection.html profile.html profile_broken.html tier_lock_demo.html)",
      "Bash(do echo \"=== Updating $file ===\")",
      "Bash(if grep -q \"openCreativeWriting\" \"$file\")",
      "Bash(else echo \"No Creative Writer button found in $file\")",
      "Bash(start:*)",
      "WebFetch(domain:railway.app)",
      "Bash(git pull:*)",
      "Bash(git log:*)",
      "Bash(if [ -z \"$OPENAI_API_KEY\" ])",
      "Bash(then echo \"❌ OPENAI_API_KEY is NOT set\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nimport os\n\ntry:\n    conn = psycopg2.connect(os.environ.get(''DATABASE_URL''))\n    cur = conn.cursor()\n    \n    # Check your current user status in the database\n    user_id = 104  # Your user ID\n    cur.execute(''SELECT id, email, user_plan, trial_active, trial_expires_at FROM users WHERE id = %s'', (user_id,))\n    result = cur.fetchone()\n    \n    if result:\n        user_id, email, user_plan, trial_active, trial_expires = result\n        print(f''DATABASE USER STATUS:'')\n        print(f''  User ID: {user_id}'')\n        print(f''  Email: {email}'')\n        print(f''  Plan: {user_plan}'')\n        print(f''  Trial Active: {trial_active}'')\n        print(f''  Trial Expires: {trial_expires}'')\n        \n        print(f''\\nFor AI Images, user should see:'')\n        if user_plan == ''gold'':\n            print(f''  AI Image Tier: gold'')\n            print(f''  Monthly Limit: 999 (displayed as unlimited)'')\n        elif trial_active and user_plan == ''bronze'':\n            print(f''  AI Image Tier: silver (trial access)'')\n            print(f''  Monthly Limit: 10 (Silver tier access)'')\n        else:\n            print(f''  AI Image Tier: {user_plan}'')\n            if user_plan == ''silver'':\n                print(f''  Monthly Limit: 10'')\n            else:\n                print(f''  Monthly Limit: 0 (Bronze - locked)'')\n    else:\n        print(''User not found'')\n        \n    conn.close()\nexcept Exception as e:\n    print(f''Error: {e}'')\n\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python add_theme_column.py)",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nfrom datetime import datetime, timezone\nimport os\n\nconn = psycopg2.connect(os.environ.get(''DATABASE_URL''))\ncur = conn.cursor()\n\n# Check your current status\nuser_id = 104\ncur.execute(''SELECT id, email, user_plan, trial_active, trial_expires_at FROM users WHERE id = %s'', (user_id,))\nresult = cur.fetchone()\n\nif result:\n    user_id, email, user_plan, trial_active, trial_expires = result\n    print(f''DATABASE STATUS:'')\n    print(f''  User ID: {user_id}'')\n    print(f''  Email: {email}'')\n    print(f''  Plan: {user_plan}'')\n    print(f''  Trial Active: {trial_active}'')\n    print(f''  Trial Expires: {trial_expires}'')\n    \n    if trial_expires:\n        now = datetime.now(timezone.utc)\n        if isinstance(trial_expires, str):\n            expires_dt = datetime.fromisoformat(trial_expires.replace(''Z'', ''+00:00''))\n        else:\n            expires_dt = trial_expires.replace(tzinfo=timezone.utc) if trial_expires.tzinfo is None else trial_expires\n        print(f''  Current Time: {now}'')\n        print(f''  Trial Should Be Active: {now < expires_dt}'')\n\nconn.close()\n\")",
      "Bash(DATABASE_URL=\"postgresql://postgres:sDCOyvWZKSxyJvnJBZNSJemzZKbbSjIT@postgres-wj-8.railway.internal:5432/railway\" python -c \"\nimport psycopg2\nfrom datetime import datetime, timezone\nimport os\n\nconn = psycopg2.connect(os.environ.get(''DATABASE_URL''))\ncur = conn.cursor()\n\n# Check your current status\nuser_id = 104\ncur.execute(''SELECT id, email, user_plan, trial_active, trial_expires_at FROM users WHERE id = %s'', (user_id,))\nresult = cur.fetchone()\n\nif result:\n    user_id, email, user_plan, trial_active, trial_expires = result\n    print(f''CURRENT STATUS:'')\n    print(f''  User ID: {user_id}'')\n    print(f''  Email: {email}'')\n    print(f''  Plan: {user_plan}'')\n    print(f''  Trial Active: {trial_active}'')\n    print(f''  Trial Expires: {trial_expires}'')\n    \n    if trial_expires:\n        now = datetime.now(timezone.utc)\n        if isinstance(trial_expires, str):\n            expires_dt = datetime.fromisoformat(trial_expires.replace(''Z'', ''+00:00''))\n        else:\n            expires_dt = trial_expires.replace(tzinfo=timezone.utc) if trial_expires.tzinfo is None else trial_expires\n        print(f''  Current Time: {now}'')\n        print(f''  Trial Should Be Active: {now < expires_dt}'')\n\nconn.close()\n\")",
      "Bash(then sqlite3 backend/soulbridge.db \"SELECT id, email, user_plan, trial_active FROM users WHERE id = 104 LIMIT 1;\")",
      "Bash(git revert:*)"
    ],
    "deny": [],
    "defaultMode": "acceptEdits"
  }
}
// Complete working register system with comprehensive translations
document.addEventListener("DOMContentLoaded", function() {
    
    // === REGISTER FORM HANDLING ===
    const registerForm = document.getElementById("registerForm");
    const registerBtn = document.getElementById("registerBtn");
    const displayNameInput = document.getElementById("display_name");
    const emailInput = document.getElementById("email");
    const passwordInput = document.getElementById("password");
    const confirmPasswordInput = document.getElementById("confirm_password");
    
    if (registerForm) {
        registerForm.onsubmit = null;
        registerForm.addEventListener("submit", function(e) {
            const displayName = displayNameInput ? displayNameInput.value.trim() : "";
            const email = emailInput ? emailInput.value.trim() : "";
            const password = passwordInput ? passwordInput.value : "";
            const confirmPassword = confirmPasswordInput ? confirmPasswordInput.value : "";
            
            if (!displayName || !email || !password || !confirmPassword) {
                e.preventDefault();
                alert("Please fill in all fields");
                return;
            }
            
            if (password !== confirmPassword) {
                e.preventDefault();
                alert("Passwords do not match");
                return;
            }
            
            if (registerBtn) {
                registerBtn.disabled = true;
                registerBtn.textContent = "Creating account...";
            }
            // Let form submit naturally
        });
    }
    
    // === PASSWORD TOGGLE ===
    const passwordToggleBtn = document.getElementById("registerToggleBtn");
    const confirmToggleBtn = document.getElementById("confirmToggleBtn");
    
    if (passwordToggleBtn && passwordInput) {
        passwordToggleBtn.addEventListener("click", function() {
            if (passwordInput.type === "password") {
                passwordInput.type = "text";
                passwordToggleBtn.textContent = "üôà";
            } else {
                passwordInput.type = "password";
                passwordToggleBtn.textContent = "üëÅÔ∏è";
            }
        });
    }
    
    if (confirmToggleBtn && confirmPasswordInput) {
        confirmToggleBtn.addEventListener("click", function() {
            if (confirmPasswordInput.type === "password") {
                confirmPasswordInput.type = "text";
                confirmToggleBtn.textContent = "üôà";
            } else {
                confirmPasswordInput.type = "password";
                confirmToggleBtn.textContent = "üëÅÔ∏è";
            }
        });
    }
    
    // === THEME TOGGLE ===
    const themeToggle = document.getElementById("themeToggle");
    if (themeToggle) {
        themeToggle.addEventListener("click", function() {
            document.body.classList.toggle("day-mode");
            const isDayMode = document.body.classList.contains("day-mode");
            
            const themeText = document.getElementById("themeText");
            const themeIcon = document.getElementById("themeIcon");
            
            if (isDayMode) {
                if (themeText) themeText.textContent = "Day Mode is ON";
                if (themeIcon) themeIcon.textContent = "‚òÄÔ∏è";
                themeToggle.style.background = "rgba(255, 193, 7, 0.8)";
                themeToggle.style.color = "#000";
                localStorage.setItem("theme", "day");
            } else {
                if (themeText) themeText.textContent = "Night Mode is ON";
                if (themeIcon) themeIcon.textContent = "üåô";
                themeToggle.style.background = "rgba(34, 211, 238, 0.8)";
                themeToggle.style.color = "#000";
                localStorage.setItem("theme", "night");
            }
        });
    }
    
    // === LANGUAGE TOGGLE ===
    const languageSelector = document.getElementById("languageSelector");
    const languageMenu = document.getElementById("languageMenu");
    
    if (languageSelector && languageMenu) {
        languageSelector.addEventListener("click", function() {
            languageMenu.style.display = languageMenu.style.display === "block" ? "none" : "block";
        });
        
        // Close menu when clicking outside
        document.addEventListener("click", function(event) {
            if (!languageSelector.contains(event.target) && !languageMenu.contains(event.target)) {
                languageMenu.style.display = "none";
            }
        });
    }
    
    // === LANGUAGE CHANGE ===
    window.changeLanguage = function(langCode) {
        console.log("üåç [REGISTER] Changing language to:", langCode);
        localStorage.setItem("selectedLanguage", langCode);
        
        // Update language display
        const currentLanguage = document.getElementById("currentLanguage");
        const langMap = {
            'en': 'EN',
            'es': 'ES', 
            'fr': 'FR',
            'de': 'DE',
            'pt': 'PT',
            'zh': 'ZH',
            'ja': 'JP',
            'ru': 'RU'
        };
        
        if (currentLanguage && langMap[langCode]) {
            currentLanguage.textContent = langMap[langCode];
            console.log('üåç [REGISTER] Updated language display to:', langMap[langCode]);
        }
        
        // Hide menu
        if (languageMenu) {
            languageMenu.style.display = "none";
        }
        
        // Apply translations
        try {
            applyTranslations(langCode);
        } catch (error) {
            console.error('üåç [REGISTER] Error in applyTranslations:', error);
        }
    };
    
    // === LOAD SAVED SETTINGS ===
    function loadSavedSettings() {
        // Load theme
        const savedTheme = localStorage.getItem("theme") || "night";
        if (savedTheme === "day" && document.body) {
            document.body.classList.add("day-mode");
            const themeText = document.getElementById("themeText");
            const themeIcon = document.getElementById("themeIcon");
            
            if (themeText) themeText.textContent = "Day Mode is ON";
            if (themeIcon) themeIcon.textContent = "‚òÄÔ∏è";
            if (themeToggle) {
                themeToggle.style.background = "rgba(255, 193, 7, 0.8)";
                themeToggle.style.color = "#000";
            }
        }
        
        // Load language
        const savedLang = localStorage.getItem("selectedLanguage") || "en";
        const currentLanguage = document.getElementById("currentLanguage");
        const langMap = {
            'en': 'EN',
            'es': 'ES',
            'fr': 'FR',
            'de': 'DE',
            'pt': 'PT',
            'zh': 'ZH',
            'ja': 'JP',
            'ru': 'RU'
        };
        
        if (currentLanguage && langMap[savedLang]) {
            currentLanguage.textContent = langMap[savedLang];
        }
        
        // Apply saved language translations
        applyTranslations(savedLang);
    }
    
    // === COMPREHENSIVE TRANSLATIONS ===
    function applyTranslations(langCode) {
        console.log('üåç [REGISTER] Applying translations for language:', langCode);
        
        const translations = {
            en: {
                create_account: "Create Account",
                start_journey: "Start your journey with AI companions",
                display_name: "Display Name",
                email: "Email",
                password: "Password",
                confirm_password: "Confirm Password",
                req_8_chars: "At least 8 characters",
                req_uppercase: "One uppercase letter",
                req_lowercase: "One lowercase letter", 
                req_number: "One number",
                agree_to: "I agree to the",
                terms_service: "Terms of Service",
                and: "and",
                privacy_policy: "Privacy Policy",
                already_have_account: "Already have an account?",
                sign_in: "Sign in",
                back: "‚Üê Back",
                language_en: "EN",
                lang_english: "English",
                lang_spanish: "Espa√±ol",
                lang_french: "Fran√ßais", 
                lang_german: "Deutsch",
                lang_portuguese: "Portugu√™s",
                lang_chinese: "‰∏≠Êñá",
                lang_japanese: "Êó•Êú¨Ë™û",
                lang_russian: "–†—É—Å—Å–∫–∏–π"
            },
            es: {
                create_account: "Crear Cuenta",
                start_journey: "Comienza tu viaje con compa√±eros de IA",
                display_name: "Nombre de Pantalla",
                email: "Correo Electr√≥nico", 
                password: "Contrase√±a",
                confirm_password: "Confirmar Contrase√±a",
                req_8_chars: "Al menos 8 caracteres",
                req_uppercase: "Una letra may√∫scula",
                req_lowercase: "Una letra min√∫scula",
                req_number: "Un n√∫mero",
                agree_to: "Acepto los",
                terms_service: "T√©rminos de Servicio",
                and: "y",
                privacy_policy: "Pol√≠tica de Privacidad",
                already_have_account: "¬øYa tienes una cuenta?",
                sign_in: "Iniciar sesi√≥n",
                back: "‚Üê Atr√°s",
                language_en: "ES",
                lang_english: "English",
                lang_spanish: "Espa√±ol",
                lang_french: "Fran√ßais", 
                lang_german: "Deutsch",
                lang_portuguese: "Portugu√™s",
                lang_chinese: "‰∏≠Êñá",
                lang_japanese: "Êó•Êú¨Ë™û",
                lang_russian: "–†—É—Å—Å–∫–∏–π"
            },
            fr: {
                create_account: "Cr√©er un Compte",
                start_journey: "Commencez votre voyage avec des compagnons IA",
                display_name: "Nom d'Affichage",
                email: "E-mail",
                password: "Mot de Passe",
                confirm_password: "Confirmer le Mot de Passe",
                req_8_chars: "Au moins 8 caract√®res",
                req_uppercase: "Une lettre majuscule",
                req_lowercase: "Une lettre minuscule",
                req_number: "Un chiffre",
                agree_to: "J'accepte les",
                terms_service: "Conditions de Service",
                and: "et",
                privacy_policy: "Politique de Confidentialit√©",
                already_have_account: "Vous avez d√©j√† un compte?",
                sign_in: "Se connecter",
                back: "‚Üê Retour",
                language_en: "FR"
            },
            de: {
                create_account: "Konto Erstellen",
                start_journey: "Beginnen Sie Ihre Reise mit KI-Begleitern",
                display_name: "Anzeigename",
                email: "E-Mail",
                password: "Passwort",
                confirm_password: "Passwort Best√§tigen",
                req_8_chars: "Mindestens 8 Zeichen",
                req_uppercase: "Ein Gro√übuchstabe",
                req_lowercase: "Ein Kleinbuchstabe",
                req_number: "Eine Zahl",
                agree_to: "Ich stimme den",
                terms_service: "Nutzungsbedingungen",
                and: "und",
                privacy_policy: "Datenschutzrichtlinie",
                already_have_account: "Haben Sie bereits ein Konto?",
                sign_in: "Anmelden",
                back: "‚Üê Zur√ºck",
                language_en: "DE"
            },
            pt: {
                create_account: "Criar Conta",
                start_journey: "Comece sua jornada com companheiros de IA",
                display_name: "Nome de Exibi√ß√£o",
                email: "E-mail",
                password: "Senha",
                confirm_password: "Confirmar Senha",
                req_8_chars: "Pelo menos 8 caracteres",
                req_uppercase: "Uma letra mai√∫scula",
                req_lowercase: "Uma letra min√∫scula",
                req_number: "Um n√∫mero",
                agree_to: "Eu concordo com os",
                terms_service: "Termos de Servi√ßo",
                and: "e",
                privacy_policy: "Pol√≠tica de Privacidade",
                already_have_account: "J√° tem uma conta?",
                sign_in: "Entrar",
                back: "‚Üê Voltar",
                language_en: "PT"
            },
            zh: {
                create_account: "ÂàõÂª∫Ë¥¶Êà∑",
                start_journey: "‰∏éAI‰ºô‰º¥ÂºÄÂßãÊÇ®ÁöÑÊóÖÁ®ã",
                display_name: "ÊòæÁ§∫ÂêçÁß∞",
                email: "ÁîµÂ≠êÈÇÆ‰ª∂",
                password: "ÂØÜÁ†Å",
                confirm_password: "Á°ÆËÆ§ÂØÜÁ†Å",
                req_8_chars: "Ëá≥Â∞ë8‰∏™Â≠óÁ¨¶",
                req_uppercase: "‰∏Ä‰∏™Â§ßÂÜôÂ≠óÊØç",
                req_lowercase: "‰∏Ä‰∏™Â∞èÂÜôÂ≠óÊØç",
                req_number: "‰∏Ä‰∏™Êï∞Â≠ó",
                agree_to: "ÊàëÂêåÊÑè",
                terms_service: "ÊúçÂä°Êù°Ê¨æ",
                and: "Âíå",
                privacy_policy: "ÈöêÁßÅÊîøÁ≠ñ",
                already_have_account: "Â∑≤ÁªèÊúâË¥¶Êà∑‰∫ÜÔºü",
                sign_in: "ÁôªÂΩï",
                back: "‚Üê ËøîÂõû",
                language_en: "ZH"
            },
            ja: {
                create_account: "„Ç¢„Ç´„Ç¶„É≥„Éà‰ΩúÊàê",
                start_journey: "AI„Ç≥„É≥„Éë„Éã„Ç™„É≥„Å®„ÅÇ„Å™„Åü„ÅÆÊóÖ„ÇíÂßã„ÇÅ„Åæ„Åó„Çá„ÅÜ",
                display_name: "Ë°®Á§∫Âêç",
                email: "„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ",
                password: "„Éë„Çπ„ÉØ„Éº„Éâ",
                confirm_password: "„Éë„Çπ„ÉØ„Éº„ÉâÁ¢∫Ë™ç",
                req_8_chars: "8ÊñáÂ≠ó‰ª•‰∏ä",
                req_uppercase: "Â§ßÊñáÂ≠ó1„Å§",
                req_lowercase: "Â∞èÊñáÂ≠ó1„Å§",
                req_number: "Êï∞Â≠ó1„Å§",
                agree_to: "ÁßÅ„ÅØÂêåÊÑè„Åó„Åæ„Åô",
                terms_service: "Âà©Áî®Ë¶èÁ¥Ñ",
                and: "„Å®",
                privacy_policy: "„Éó„É©„Ç§„Éê„Ç∑„Éº„Éù„É™„Ç∑„Éº",
                already_have_account: "„Åô„Åß„Å´„Ç¢„Ç´„Ç¶„É≥„Éà„Çí„ÅäÊåÅ„Å°„Åß„Åô„ÅãÔºü",
                sign_in: "„É≠„Ç∞„Ç§„É≥",
                back: "‚Üê Êàª„Çã",
                language_en: "JP"
            },
            ru: {
                create_account: "–°–æ–∑–¥–∞—Ç—å –ê–∫–∫–∞—É–Ω—Ç",
                start_journey: "–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å –ò–ò-—Å–ø—É—Ç–Ω–∏–∫–∞–º–∏",
                display_name: "–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –ò–º—è",
                email: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ü–æ—á—Ç–∞",
                password: "–ü–∞—Ä–æ–ª—å",
                confirm_password: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ü–∞—Ä–æ–ª—å",
                req_8_chars: "–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤",
                req_uppercase: "–û–¥–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞",
                req_lowercase: "–û–¥–Ω–∞ —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞",
                req_number: "–û–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞",
                agree_to: "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å",
                terms_service: "–£—Å–ª–æ–≤–∏—è–º–∏ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
                and: "–∏",
                privacy_policy: "–ü–æ–ª–∏—Ç–∏–∫–æ–π –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                already_have_account: "–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?",
                sign_in: "–í–æ–π—Ç–∏",
                back: "‚Üê –ù–∞–∑–∞–¥",
                language_en: "RU"
            }
        };
        
        const translation = translations[langCode] || translations.en;
        console.log('üåç [REGISTER] Translation object:', translation);
        
        // Find all elements with data-translate attribute
        const elements = document.querySelectorAll('[data-translate]');
        console.log('üåç [REGISTER] Found elements with data-translate:', elements.length);
        
        elements.forEach(element => {
            const key = element.getAttribute('data-translate');
            console.log('üåç [REGISTER] Processing element with key:', key, 'current text:', element.textContent.trim());
            if (translation[key]) {
                element.textContent = translation[key];
                console.log('üåç [REGISTER] Updated to:', translation[key]);
            } else {
                console.warn('üåç [REGISTER] Missing translation for key:', key);
            }
        });
        
        // Update placeholders
        const inputs = document.querySelectorAll('[data-translate-placeholder]');
        inputs.forEach(input => {
            const key = input.getAttribute('data-translate-placeholder');
            if (translation[key]) {
                input.placeholder = translation[key];
                console.log('üåç [REGISTER] Updated placeholder for:', key, 'to:', translation[key]);
            }
        });
        
        console.log('üåç [REGISTER] Translation application complete');
    }
    
    // Initialize settings
    loadSavedSettings();
    
});